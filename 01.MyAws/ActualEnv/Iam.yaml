---
AWSTemplateFormatVersion: 2010-09-09
Resources:
################ User & Key ################
  IamUserTest:
    Type: AWS::IAM::User
    Properties:
      UserName: test-user
      LoginProfile:
        Password: "jdAyruwaenvasld1urt"
        PasswordResetRequired: false
      Path: "/somedevision/subdivision/someproject/develper/"
  IamKeysTest:
    DependsOn: IamUserTest
    Type: "AWS::IAM::AccessKey"
    Properties:
      UserName: !Ref IamUserTest
################ Group ################
  IamGroupAdmin:
    Type: AWS::IAM::Group
    Properties:
      GroupName: ShivaqAdmin
      Path: "/somedevision/subdivision/someproject/admin/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/AdministratorAccess"
  IamUserToGroupAdmin:
    Type: AWS::IAM::UserToGroupAddition
    Properties:
      GroupName: !Ref IamGroupAdmin
      Users:
        - !Ref IamUserTest
############## Role ##############
############## StopEc2
  PolicyToStopEc2:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: StopEc2
      Description: StopEc2
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - logs:*
            - ec2:StopInstances
            - ec2:Describe*
            Resource: "*"
      Roles:
        - !Ref RoleToStopEc2
  RoleToStopEc2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: RoleToStopEc2
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
############## EC2 Common
  PolicyEc2Common:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: Ec2Common
      Description: Common role for Ec2 instances
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - s3:List*
            - s3:PutObject
            Resource: "*"
      Roles:
        - !Ref RoleEc2Common
  RoleEc2Common:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Ec2Common
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
  ProfileEc2Common:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2Common
      Roles:
        - !Ref RoleEc2Common
############## EC2 GetS3Objects
  PolicyEc2GetS3Objects:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: Ec2GetS3Objects
      Description: Ec2 instances can get S3 objects
      Path: /
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
            - s3:List*
            - s3:GetObject
            - s3:PutObject
            Resource: "*"
      Roles:
        - !Ref RoleEc2GetS3Objects
  RoleEc2GetS3Objects:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Ec2GetS3Objects
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - "sts:AssumeRole"
      Path: "/"
  ProfileEc2GetS3Objects:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: Ec2GetS3Objects
      Roles:
        - !Ref RoleEc2GetS3Objects
################ Outputs ################
Outputs:
  customerakeyId:
    Description:  Access Key ID
    Value: !Ref IamKeysTest
  IamSecretkey:
    Description:  Secret Access Key
    Value: !GetAtt IamKeysTest.SecretAccessKey
  RoleToStopEc2Arn:
    Value: !GetAtt RoleToStopEc2.Arn
    Export:
      Name: !Sub "${AWS::StackName}-RoleToStopEc2Arn"
  ProfileEc2Common:
    Value: !Ref ProfileEc2Common
    Export:
      Name: !Sub "${AWS::StackName}-ProfileEc2Common"
