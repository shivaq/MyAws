■■■■■■■■■■■■ AWS Batch とは
・キューベースのジョブ実行サービス
・高スケーラビリティなバッチを簡単作成可能
・キューにputすると、バッチが起動しなんらかの処理を行う
・ジョブに依存関係が定義できる
・処理すべきジョブ数に応じ、クラスタがオートスケール
・処理能力ごとにクラスタを分割管理可能
・クラスタはECS 上に構築される
・ジョブの依存関係が定義できる（B は A に依存した処理である2、など）
・優先度を持ったキューを複数定義できる

▼ マネージドな機能
・クラスタ管理、ジョブキュー、ジョブスケジューラ


▼ ジョブキュー
FIFOに対応
Prioritize 可能
優先順位1より、優先順位10が先に実行されます。

■■■■■■■■■■■■■■■■■■■■■■■■■■ EC2
インスタンスタイプから、key pair、ロールなどを指定
AutoScalingに関する設定
・クラスタ数上限を指定可能
※ vCPU 数で指定
・インスタンスタイプを指定またはおまかせ可能
※ C、M、R ファミリーから、最適なものが選択される
※立ち上がったインスタンスは、EC2、ECS の画面で確認可能

■■■■■■■■■■■■■■■■■■■■■■■■■■ ジョブ定義
・ジョブとして起動するコンテナイメージ
・実行コマンド
・環境変数
・マウントするボリュームなどを指定
・コンテナ実行エラー時のリトライ回数を指定

▼ エラー判定
コンテナジョブのゼロ以外の終了コード
Amazon EC2 インスタンスの障害または終了
AWS サービスの内部エラーまたは停止


■■■■■■■■■■■■■■■■■■■■■■■■■■ トリガー
・CloudWatch Events を利用可能
 →スケジュール起動可能
 →APIコールによる起動が可能

▼ CloudWatch Events に設定する情報
ジョブキューのARN
タスク定義名またはARN
ジョブ名
(オプション)Array
(オプション)ジョブのリトライ回数


■■■■■■■■■■■■■■■■■■■■■■■■■■ フロー
▼ 準備
・Docker イメージを作成
https://qiita.com/Esfahan/items/8774afff63ee98b05309

▼ 通常運転
・jobをsubmitし、Batchのqueueに登録(FIFO)
※AWS Batchをキック
・job を実行
・ECS がEC2 インスタンスを起動 ※ ここがタイムラグとなる
・ECS がECRまたはDocker Hubからコンテナイメージを取得 →コンテナ立ち上げ
・コンテナ上でタスクを実行 ※処理の重さに応じてオートスケール
・終わったら自動でterminate

■■■■■■■■■■■■■■■■■■■■■■■■■■ Lambda じゃないからできること
・Lambdaの5分制限を気にしなくてよい
・ディスクもEBSやインスタンスストアを利用できるため容量が大きい
・開発言語が自由

■■■■■■■■■■■■■■■■■■■■■■■■■■ 主な用途
・ハイパフォーマンスコンピューティング用途で真価を発揮
・大規模なスケール、ジョブの依存定義 が可能なマネージド 並列分散 処理基盤




■■■■■■■■■■■■ 必要なもの
ECS
・アプリの基本的なビルディングブロックとしてのコンテナを作成
・コンテナのスケールアップ/ダウンでアプリの容量要件に対応
・ELB などとも統合して利用できる

▼ クラスター
サービスが稼働するEC2インスタンス（群）

▼ タスク
コンテナの集まりで、docker-compose.ymlのイメージ。

▼ サービス
タスクとクラスター、ELB（ターゲットグループ）を紐付ける。
EBでいうアプリケーションのような感じ。

■■■■■■■■■■■■ AWS Fargate を使った ECS
・EC2 を管理することなく、コンテナを実行できる。
・インスタンスタイプ、スケールタイミング等の最適化をする必要がない


-------------------------------------------------
ECR
・コンテナImageを登録するレポジトリを作成
